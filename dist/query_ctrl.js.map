{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","_","GenericDatasourceQueryCtrl","$scope","$injector","$http","$q","datasourceSrv","target","humioQuery","humioDataspace","undefined","dataspaces","_getHumioDataspaces","then","r","query","datasource","metricFindQuery","rawQuery","panelCtrl","refresh","url","requestOpts","method","headers","backendSrv","datasourceRequest","res","data","map","ds","value","id","name","sortBy","when","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,e,kBAAAA,S;;AAGKC,O;;;;;;;;;;;;;;;;;;;;;4CAEMC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,EAAtC,EAA0CC,aAA1C,EAAyD;AAAA;;AAAA,8JACjDJ,MADiD,EACzCC,SADyC;;AAGvD,gBAAKC,KAAL,GAAaA,KAAb;AACA,gBAAKF,MAAL,GAAcA,MAAd;AACA,gBAAKG,EAAL,GAAUA,EAAV;;AAEA,gBAAKE,MAAL,CAAYC,UAAZ,GAAyB,MAAKD,MAAL,CAAYC,UAAZ,IAA0B,aAAnD;AACA,gBAAKD,MAAL,CAAYE,cAAZ,GAA6B,MAAKF,MAAL,CAAYE,cAAZ,IAA8BC,SAA3D;;AAEA,gBAAKC,UAAL,GAAkB,EAAlB;AACA,gBAAKC,mBAAL,GAA2BC,IAA3B,CAAgC,UAACC,CAAD,EAAO;AACrC,kBAAKH,UAAL,GAAkBG,CAAlB;AACD,WAFD;AAXuD;AAcxD;;;;qCAEUC,K,EAAO;AAChB,mBAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAgCF,SAAS,EAAzC,CAAP;AACD;;;6CAEkB;AACjB,iBAAKR,MAAL,CAAYW,QAAZ,GAAuB,CAAC,KAAKX,MAAL,CAAYW,QAApC;AACD;;;6CAEkB;AACjB,iBAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;gDAEqB;AACpB,gBAAI,KAAKJ,UAAL,CAAgBK,GAApB,EAAyB;;AAEvB,kBAAIC,cAAc;AAChBC,wBAAQ,KADQ;AAEhBF,qBAAK,KAAKL,UAAL,CAAgBK,GAAhB,GAAsB,oBAFX;AAGhBG,yBAAS,KAAKR,UAAL,CAAgBQ;AAHT,eAAlB;;AAMA,qBAAO,KAAKR,UAAL,CAAgBS,UAAhB,CAA2BC,iBAA3B,CAA6CJ,WAA7C,EAA0DT,IAA1D,CAA+D,UAACC,CAAD,EAAO;AAC3E,oBAAIa,MAAMb,EAAEc,IAAF,CAAOC,GAAP,CAAW,UAACC,EAAD,EAAQ;AAC3B,yBAAQ;AACNC,2BAAOD,GAAGE,EADJ;AAENC,0BAAMH,GAAGE;AAFH,mBAAR;AAID,iBALS,CAAV;AAMA,uBAAOhC,EAAEkC,MAAF,CAASP,GAAT,EAAc,CAAC,MAAD,CAAd,CAAP;AACD,eARM,CAAP;AASD,aAjBD,MAiBO;AACL,qBAAO,KAAKtB,EAAL,CAAQ8B,IAAR,CAAa,EAAb,CAAP;AACD;AACF;;;;QAnD6CpC,S;;;;AAsDhDE,iCAA2BmC,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {\n  QueryCtrl\n} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\nimport _ from \"lodash\";\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, $http, $q, datasourceSrv) {\n    super($scope, $injector);\n\n    this.$http = $http;\n    this.$scope = $scope;\n    this.$q = $q;\n\n    this.target.humioQuery = this.target.humioQuery || 'timechart()';\n    this.target.humioDataspace = this.target.humioDataspace || undefined;\n\n    this.dataspaces = [];\n    this._getHumioDataspaces().then((r) => {\n      this.dataspaces = r;\n    });\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  _getHumioDataspaces() {\n    if (this.datasource.url) {\n\n      var requestOpts = {\n        method: 'GET',\n        url: this.datasource.url + '/api/v1/dataspaces',\n        headers: this.datasource.headers\n      };\n\n      return this.datasource.backendSrv.datasourceRequest(requestOpts).then((r) => {\n        let res = r.data.map((ds) => {\n          return ({\n            value: ds.id,\n            name: ds.id\n          })\n        });\n        return _.sortBy(res, ['name']);\n      });\n    } else {\n      return this.$q.when([]);\n    }\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}