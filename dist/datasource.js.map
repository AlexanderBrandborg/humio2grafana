{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","$location","type","url","name","q","withCredentials","token","jsonData","humioToken","humioDataspace","headers","basicAuth","length","queryParams","queryId","options","query","buildQueryParameters","console","log","range","raw","targets","filter","t","hide","when","data","dt","composedQuery","_composeQuery","then","r","convertEvs","evs","map","ev","_count","parseInt","_bucket","target","datapoints","events","queryDt","grafanaQueryOpts","refresh","search","from","to","start","_d","getTime","end","isLive","_composeLiveQuery","_initQuery","_pollQuery","id","doRequest","method","response","status","message","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","text","value","d","i","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, $location) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.$location = $location;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n\n    // NOTE: humio specific options\n    this.token = instanceSettings.jsonData.humioToken;\n    this.humioDataspace = instanceSettings.jsonData.humioDataspace;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + instanceSettings.jsonData.humioToken\n    };\n\n    // TODO: remove\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    // NOTE: session query storage\n    this.queryParams = {\n      queryId: null,\n    };\n\n  }\n\n  query(options) {\n\n    var query = this.buildQueryParameters(options);\n\n    console.log('the options ->');\n    console.log(options.range.raw);\n\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({\n        data: []\n      });\n    }\n\n    var dt = {\n      \"queryString\": \"timechart()\",\n      \"timeZoneOffsetMinutes\": 180,\n      \"showQueryEventDistribution\": false,\n      \"start\": \"5m\"\n    }\n\n\n    let composedQuery = this._composeQuery(dt, options);\n    return composedQuery.then((r) => {\n\n      var convertEvs = (evs) => {\n        return evs.map((ev) => {\n          return [ev._count, parseInt(ev._bucket)];\n        })\n      };\n\n      r.data = [{\n        target: \"_count\",\n        datapoints: convertEvs(r.data.events)\n      }]\n\n      return r;\n\n    });\n  }\n\n  _composeQuery(queryDt, grafanaQueryOpts) {\n    let refresh = this.$location.search().refresh || null;\n\n    // NOTE: handling custom date range\n    if ((typeof grafanaQueryOpts.range.raw.from != \"string\") &&\n      (typeof grafanaQueryOpts.range.raw.to != \"string\") && refresh == null) {\n      queryDt.start = grafanaQueryOpts.range.raw.from._d.getTime();\n      queryDt.end = grafanaQueryOpts.range.raw.to._d.getTime();\n    }\n\n    queryDt.isLive = refresh != null;\n    if (refresh) {\n      return this._composeLiveQuery(queryDt);\n    } else {\n      return this._initQuery(queryDt).then((r) => {\n        return this._pollQuery(r.data.id);\n      });\n    }\n  }\n\n  _composeLiveQuery(queryDt) {\n    if (this.queryParams.queryId == null) {\n      return this._initQuery(queryDt).then((r) => {\n        this.queryParams.queryId = r.data.id;\n        return this._pollQuery(r.data.id);\n      });\n    } else {\n      return this._pollQuery(this.queryParams.queryId);\n    }\n  }\n\n  _initQuery(queryDt) {\n    return this.doRequest({\n      url: this.url + '/api/v1/dataspaces/' + this.humioDataspace + '/queryjobs',\n      data: queryDt,\n      method: 'POST',\n    })\n  }\n\n  _pollQuery(queryId) {\n    return this.doRequest({\n      url: this.url + '/api/v1/dataspaces/' + this.humioDataspace + '/queryjobs/' + queryId,\n      method: 'GET',\n    })\n  }\n\n  testDatasource() {\n    console.log(\"-> 10\");\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    // TODO: for now handling only timechart queries\n    return [{\n      text: \"_count\",\n      value: \"_count\",\n    }];\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return {\n          text: d.text,\n          value: d.value\n        };\n      } else if (_.isObject(d)) {\n        return {\n          text: d,\n          value: i\n        };\n      }\n      return {\n        text: d,\n        value: d\n      };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}