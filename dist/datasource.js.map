{"version":3,"sources":["../src/datasource.js"],"names":["_","HumioHelper","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","$location","$rootScope","type","url","replace","name","headers","jsonData","humioToken","timeRange","undefined","queryParams","options","targets","length","resolve","data","panelId","humioQueryStr","humioQuery","humioDataspace","query","range","dt","Date","getTimezoneOffset","queryId","failCounter","isLive","reject","handleErr","err","console","log","status","_updateQueryParams","_composeQuery","then","handleRes","appEvent","r","done","_composeResult","clone","timeseriesField","seriesField","metaData","extraData","series","valueField","filter","fields","f","i","events","ev","parseInt","_bucket","push","keys","map","s","target","datapoints","parseFloat","_count","workDone","totalWork","toFixed","setTimeout","queryOptions","resFx","currentTarget","hasOwnProperty","timechart","isAggregate","queryDt","JSON","stringify","_stopExecution","grafanaQueryOpts","refresh","search","checkToDateNow","raw","to","start","parseDateFrom","from","_stopUpdatedQuery","_composeLiveQuery","_pollQuery","_d","getTime","end","_initQuery","id","doRequest","method","newQueryParams","assign","response","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","withCredentials","datasourceRequest"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACEC,iB,WAAAA,W;;;;;;;;;;;;;;;;;;;;;mCAEIC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2DC,SAA3D,EAAsEC,UAAtE,EAAkF;AAAA;;AAChF,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,GAAL,GAAWP,iBAAiBO,GAAjB,GAAuBP,iBAAiBO,GAAjB,CAAqBC,OAArB,CAA6B,KAA7B,EAAoC,EAApC,CAAvB,GAAiE,EAA5E;AACA,eAAKC,IAAL,GAAYT,iBAAiBS,IAA7B;;AAEA,eAAKR,EAAL,GAAUA,EAAV;AACA,eAAKG,SAAL,GAAiBA,SAAjB;AACA,eAAKF,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKE,UAAL,GAAkBA,UAAlB;;AAEA,eAAKK,OAAL,GAAe;AACb,4BAAgB,kBADH;AAEb,6BAAiB,aACdV,iBAAiBW,QAAjB,GAA6BX,iBAAiBW,QAAjB,CAA0BC,UAA1B,IAAwC,WAArE,GACC,WAFa;AAFJ,WAAf;;AAOA;AACA,eAAKC,SAAL,GAAiBC,SAAjB;;AAEA;AACA,eAAKC,WAAL,GAAmB,EAAnB;AACD;;;;gCAEKC,O,EAAS;AAAA;;AAEb;AACA,gBAAIA,QAAQC,OAAR,CAAgBC,MAAhB,IAA0B,CAA9B,EAAiC;AAC/B,qBAAO,KAAKjB,EAAL,CAAQkB,OAAR,CAAgB;AACrBC,sBAAM;AADe,eAAhB,CAAP;AAGD;;AAED,gBAAIC,UAAUL,QAAQK,OAAtB;AACA,gBAAIC,gBAAgBN,QAAQC,OAAR,CAAgB,CAAhB,EAAmBM,UAAvC;AACA,gBAAIC,iBAAiBR,QAAQC,OAAR,CAAgB,CAAhB,EAAmBO,cAAxC;AACA,gBAAIC,QAAQT,OAAZ,CAZa,CAYQ;AACrB,iBAAKH,SAAL,GAAiBG,QAAQU,KAAzB;;AAEA;AACA,gBAAI,CAACF,cAAD,IAAmB,CAACF,aAAxB,EAAuC;AACrC,qBAAO,KAAKrB,EAAL,CAAQkB,OAAR,CAAgB;AACrBC,sBAAM;AADe,eAAhB,CAAP;AAGD;;AAED,gBAAIO,KAAK;AACP,6BAAeL,aADR;AAEP,uCAAyB,CAAE,IAAIM,IAAJ,EAAD,CAAaC,iBAAb,EAFnB;AAGP,4CAA8B,KAHvB;AAIP,uBAAS;;AAGX;AAPS,aAAT,CAQA,KAAKd,WAAL,CAAiBM,OAAjB,IAA4B,KAAKN,WAAL,CAAiBM,OAAjB,IAA4B,KAAKN,WAAL,CAAiBM,OAAjB,CAA5B,GAAwD;AAClFS,uBAAS,IADyE;AAElFC,2BAAa,CAFqE;AAGlF;AACAC,sBAAQ,KAJ0E;AAKlFT,0BAAYI;AALsE,aAApF;;AAQA,mBAAO,KAAK1B,EAAL,CAAQ,UAACkB,OAAD,EAAUc,MAAV,EAAqB;;AAElC,kBAAIC,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAS;AACvBC,wBAAQC,GAAR,CAAY,aAAZ;AACAD,wBAAQC,GAAR,CAAYF,GAAZ;AACA;AACA,oBAAIA,IAAIG,MAAJ,IAAc,GAAlB,EAAuB;AACrB;AACA,wBAAKC,kBAAL,CAAwBlB,OAAxB,EAAiC;AAC/BS,6BAAS,IADsB;AAE/BC,iCAAa,MAAKhB,WAAL,CAAiBM,OAAjB,EAA0BU,WAA1B,GAAwC;AAFtB,mBAAjC;AAIA,sBAAI,MAAKhB,WAAL,CAAiBM,OAAjB,EAA0BU,WAA1B,IAAyC,CAA7C,EAAgD;AAC9C,0BAAKS,aAAL,CAAmBnB,OAAnB,EAA4BM,EAA5B,EAAgCX,OAAhC,EAAyCQ,cAAzC,EAAyDiB,IAAzD,CAA8DC,SAA9D,EAAyER,SAAzE;AACD,mBAFD,MAEO;AACL;AACA,0BAAKK,kBAAL,CAAwBlB,OAAxB,EAAiC,EAACU,aAAa,CAAd,EAAjC;AACD;AACF,iBAZD,MAYO;AACL,sBAAII,IAAIG,MAAJ,GAAa,GAAjB,EAAsB;AACpB,0BAAKjC,UAAL,CAAgBsC,QAAhB,CAAyB,aAAzB,EAAwC,CAAC,aAAD,EAAgBR,IAAIf,IAApB,CAAxC;AACD,mBAFD,MAEO;AACL,0BAAKf,UAAL,CAAgBsC,QAAhB,CAAyB,aAAzB,EAAwC,CAACR,IAAIG,MAAL,EAAaH,IAAIf,IAAjB,CAAxC;AACD;AACDD,0BAAQ;AACNC,0BAAM;AADA,mBAAR;AAGD;AACF,eA1BD;;AA4BA,kBAAIsB,YAAY,SAAZA,SAAY,CAACE,CAAD,EAAO;AACrB,oBAAIA,EAAExB,IAAF,CAAOyB,IAAX,EAAiB;AACfT,0BAAQC,GAAR,CAAY,YAAZ;;AAEA,wBAAKE,kBAAL,CAAwBlB,OAAxB,EAAiC;AAC/BU,iCAAa,CADkB;AAE/BD,6BAAS,MAAKf,WAAL,CAAiBM,OAAjB,EAA0BW,MAA1B,GAAmC,MAAKjB,WAAL,CAAiBM,OAAjB,EAA0BS,OAA7D,GAAuE;AAFjD,mBAAjC;;AAKAX,0BAAQ,MAAK2B,cAAL,CAAoB9B,OAApB,EAA6B4B,CAA7B,EAAgC,YAAM;AAC5C,wBAAIjB,KAAK9B,EAAEkD,KAAF,CAAQH,EAAExB,IAAV,CAAT;AACA,wBAAI4B,kBAAkB,SAAtB;AACA,wBAAIC,cAActB,GAAGuB,QAAH,CAAYC,SAAZ,CAAsBC,MAAxC;AACA,wBAAIA,SAAS,EAAb;AACA,wBAAIC,aAAaxD,EAAEyD,MAAF,CAAS3B,GAAGuB,QAAH,CAAYK,MAArB,EAA6B,UAACC,CAAD,EAAO;AACnD,6BAAOA,EAAE/C,IAAF,IAAUuC,eAAV,IAA6BQ,EAAE/C,IAAF,IAAUwC,WAA9C;AACD,qBAFgB,EAEd,CAFc,EAEXxC,IAFN;;AAIA;AACA,wBAAIwC,WAAJ,EAAiB;AACf;AACA,2BAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIb,EAAExB,IAAF,CAAOsC,MAAP,CAAcxC,MAAlC,EAA0CuC,GAA1C,EAA+C;AAC7C,4BAAIE,KAAKf,EAAExB,IAAF,CAAOsC,MAAP,CAAcD,CAAd,CAAT;AACA,4BAAI,CAACL,OAAOO,GAAGV,WAAH,CAAP,CAAL,EAA8B;AAC5BG,iCAAOO,GAAGV,WAAH,CAAP,IAA0B,CACxB,CAACU,GAAGN,UAAH,CAAD,EAAiBO,SAASD,GAAGE,OAAZ,CAAjB,CADwB,CAA1B;AAGD,yBAJD,MAIO;AACLT,iCAAOO,GAAGV,WAAH,CAAP,EAAwBa,IAAxB,CAA6B,CAACH,GAAGN,UAAH,CAAD,EAAiBO,SAASD,GAAGE,OAAZ,CAAjB,CAA7B;AACD;AACF;AACDjB,wBAAExB,IAAF,GAASvB,EAAEkE,IAAF,CAAOX,MAAP,EAAeY,GAAf,CAAmB,UAACC,CAAD,EAAO;AACjC,+BAAO;AACLC,kCAAQD,CADH;AAELE,sCAAYf,OAAOa,CAAP;AAFP,yBAAP;AAID,uBALQ,CAAT;AAMD,qBAlBD,MAkBO;AACL;AACA,0BAAItC,GAAG+B,MAAH,CAAUxC,MAAV,IAAoB,CAAxB,EAA2B;AACzB;AACA0B,0BAAExB,IAAF,GAASO,GAAG+B,MAAH,CAAUM,GAAV,CAAc,UAACL,EAAD,EAAQ;AAC7B,iCAAO;AACLO,oCAAQb,UADH;AAELc,wCAAY,CAAC,CAACC,WAAWT,GAAGN,UAAH,CAAX,CAAD,EAA6BA,UAA7B,CAAD;AAFP,2BAAP;AAID,yBALQ,CAAT;AAMD,uBARD,MAQO;AACL;AACAT,0BAAExB,IAAF,GAASO,GAAG+B,MAAH,CAAUM,GAAV,CAAc,UAACL,EAAD,EAAQ;AAC7B,iCAAO;AACLO,oCAAQP,GAAGN,UAAH,CADH;AAELc,wCAAY,CAAC,CAACC,WAAWT,GAAGU,MAAd,CAAD,EAAwB,MAAMV,GAAGN,UAAH,CAA9B,CAAD;AAFP,2BAAP;AAID,yBALQ,CAAT;AAMD;AACF;AACD,2BAAOT,CAAP;AACD,mBAjDO,CAAR;AAkDD,iBA1DD,MA0DO;AACLR,0BAAQC,GAAR,CAAY,kBAAZ;AACAD,0BAAQC,GAAR,CAAY,KAAK,CAACO,EAAExB,IAAF,CAAO8B,QAAP,CAAgBoB,QAAhB,GAA2B1B,EAAExB,IAAF,CAAO8B,QAAP,CAAgBqB,SAA3C,GAAuD,GAAxD,EAA6DC,OAA7D,CAAqE,CAArE,CAAL,GAA+E,GAA3F;AACAC,6BAAW,YAAM;AACf,0BAAKjC,aAAL,CAAmBnB,OAAnB,EAA4BM,EAA5B,EAAgCX,OAAhC,EAAyCQ,cAAzC,EAAyDiB,IAAzD,CAA8DC,SAA9D,EAAyER,SAAzE;AACD,mBAFD,EAEG,IAFH;AAGD;AACF,eAlED;;AAoEA,oBAAKM,aAAL,CAAmBnB,OAAnB,EAA4BM,EAA5B,EAAgCX,OAAhC,EAAyCQ,cAAzC,EAAyDiB,IAAzD,CAA8DC,SAA9D,EAAyER,SAAzE;AACD,aAnGM,CAAP;AAoGD;;;yCAEcwC,Y,EAAc9B,C,EAAG+B,K,EAAO;AACrC,gBAAIC,gBAAgBF,aAAazD,OAAb,CAAqB,CAArB,CAApB;AACA,gBAAK2D,cAAcC,cAAd,CAA6B,MAA7B,MACCD,cAActE,IAAd,IAAsB,WAAvB,IAAwCsE,cAActE,IAAd,IAAsB,OAD9D,KAEAsC,EAAExB,IAAF,CAAOyD,cAAP,CAAsB,UAAtB,KAAqCjC,EAAExB,IAAF,CAAO8B,QAAP,CAAgB2B,cAAhB,CAA+B,WAA/B,CAArC,IACCjC,EAAExB,IAAF,CAAO8B,QAAP,CAAgBC,SAAhB,CAA0B2B,SAA1B,IAAuC,MAH7C,EAGuD;AACrD;AACA,qBAAOH,OAAP;AACD,aAND,MAMO,IAAI,CAACC,cAAcC,cAAd,CAA6B,MAA7B,CAAD,IACRjC,EAAExB,IAAF,CAAOyD,cAAP,CAAsB,UAAtB,KAAqCjC,EAAExB,IAAF,CAAO8B,QAAP,CAAgB6B,WAAhB,IAA+B,IADhE,EACuE;AAC5E;AACA,qBAAOJ,OAAP;AACD,aAJM,MAIA;AACL;AACA,mBAAKtE,UAAL,CAAgBsC,QAAhB,CAAyB,aAAzB,EAAwC,CAAC,2BAAD,EAA8B,iDAA9B,CAAxC;AACA,qBAAO;AACLvB,sBAAM;AADD,eAAP;AAGD;AACF;;;4CAEiBC,O,EAAS2D,O,EAASxD,c,EAAgB;AAClD,gBAAIyD,KAAKC,SAAL,CAAe,KAAKnE,WAAL,CAAiBM,OAAjB,EAA0BE,UAAzC,MAAyD0D,KAAKC,SAAL,CAAeF,OAAf,CAA7D,EAAsF;AACpF,kBAAI,KAAKjE,WAAL,CAAiBM,OAAjB,EAA0BS,OAA9B,EAAuC;AACrC,qBAAKqD,cAAL,CAAoB,KAAKpE,WAAL,CAAiBM,OAAjB,EAA0BS,OAA9C,EAAuDN,cAAvD;AACD;AACD,mBAAKe,kBAAL,CAAwBlB,OAAxB,EAAiC;AAC/BS,yBAAS,IADsB;AAE/BP,4BAAYyD;AAFmB,eAAjC;AAID;AACF;;;wCAEa3D,O,EAAS2D,O,EAASI,gB,EAAkB5D,c,EAAgB;AAAA;;AAEhE,gBAAI6D,UAAU,KAAKjF,SAAL,GAAkB,KAAKA,SAAL,CAAekF,MAAf,GAAwBD,OAAxB,IAAmC,IAArD,GAA6D,IAA3E;AACA,gBAAI3D,QAAQ0D,iBAAiB1D,KAA7B;;AAEAsD,oBAAQhD,MAAR,GAAmBqD,WAAW,IAAZ,IAAsBvF,YAAYyF,cAAZ,CAA2B7D,MAAM8D,GAAN,CAAUC,EAArC,CAAxC;;AAEA;AACA,gBAAIT,QAAQhD,MAAZ,EAAoB;AAClBgD,sBAAQU,KAAR,GAAgB5F,YAAY6F,aAAZ,CAA0BjE,MAAM8D,GAAN,CAAUI,IAApC,CAAhB;;AAEA;AACA,mBAAKC,iBAAL,CAAuBxE,OAAvB,EAAgC2D,OAAhC,EAAyCxD,cAAzC;;AAEA,mBAAKe,kBAAL,CAAwBlB,OAAxB,EAAiC,EAACE,YAAYyD,OAAb,EAAjC;AACA,qBAAO,KAAKc,iBAAL,CAAuBzE,OAAvB,EAAgC2D,OAAhC,EAAyCxD,cAAzC,CAAP;AACD,aARD,MAQO;;AAEL;AACA,mBAAKqE,iBAAL,CAAuBxE,OAAvB,EAAgC2D,OAAhC,EAAyCxD,cAAzC;;AAEA,kBAAI,KAAKT,WAAL,CAAiBM,OAAjB,EAA0BS,OAA1B,IAAqC,IAAzC,EAA+C;AAC7C,uBAAO,KAAKiE,UAAL,CAAgB,KAAKhF,WAAL,CAAiBM,OAAjB,EAA0BS,OAA1C,EAAmDN,cAAnD,CAAP;AACD,eAFD,MAEO;AACLwD,wBAAQU,KAAR,GAAgBhE,MAAMkE,IAAN,CAAWI,EAAX,CAAcC,OAAd,EAAhB;AACAjB,wBAAQkB,GAAR,GAAcxE,MAAM+D,EAAN,CAASO,EAAT,CAAYC,OAAZ,EAAd;;AAEA;AACA,qBAAKJ,iBAAL,CAAuBxE,OAAvB,EAAgC2D,OAAhC,EAAyCxD,cAAzC;;AAEA,qBAAKe,kBAAL,CAAwBlB,OAAxB,EAAiC,EAACE,YAAYyD,OAAb,EAAjC;AACA,uBAAO,KAAKmB,UAAL,CAAgBnB,OAAhB,EAAyBxD,cAAzB,EAAyCiB,IAAzC,CAA8C,UAACG,CAAD,EAAO;AAC1D,yBAAKL,kBAAL,CAAwBlB,OAAxB,EAAiC;AAC/BS,6BAASc,EAAExB,IAAF,CAAOgF,EADe;AAE/BpE,4BAAO;AAFwB,mBAAjC;AAIA,yBAAO,OAAK+D,UAAL,CAAgBnD,EAAExB,IAAF,CAAOgF,EAAvB,EAA2B5E,cAA3B,CAAP;AACD,iBANM,CAAP;AAOD;AACF;AACF;;;4CAEiBH,O,EAAS2D,O,EAASxD,c,EAAgB;AAAA;;AAClD,gBAAI,KAAKT,WAAL,CAAiBM,OAAjB,EAA0BS,OAA1B,IAAqC,IAAzC,EAA+C;AAC7C,qBAAO,KAAKqE,UAAL,CAAgBnB,OAAhB,EAAyBxD,cAAzB,EAAyCiB,IAAzC,CAA8C,UAACG,CAAD,EAAO;AAC1D,uBAAKL,kBAAL,CAAwBlB,OAAxB,EAAiC;AAC/BS,2BAASc,EAAExB,IAAF,CAAOgF,EADe;AAE/BpE,0BAAQ;AAFuB,iBAAjC;AAIA,uBAAO,OAAK+D,UAAL,CAAgBnD,EAAExB,IAAF,CAAOgF,EAAvB,EAA2B5E,cAA3B,CAAP;AACD,eANM,CAAP;AAOD,aARD,MAQO;AACL,qBAAO,KAAKuE,UAAL,CAAgB,KAAKhF,WAAL,CAAiBM,OAAjB,EAA0BS,OAA1C,EAAmDN,cAAnD,CAAP;AACD;AACF;;;qCAEUwD,O,EAASxD,c,EAAgB;AAClC,mBAAO,KAAK6E,SAAL,CAAe;AACpB9F,mBAAK,KAAKA,GAAL,GAAW,qBAAX,GAAmCiB,cAAnC,GAAoD,YADrC;AAEpBJ,oBAAM4D,OAFc;AAGpBsB,sBAAQ;AAHY,aAAf,CAAP;AAKD;;;qCAEUxE,O,EAASN,c,EAAgB;AAClC,mBAAO,KAAK6E,SAAL,CAAe;AACpB9F,mBAAK,KAAKA,GAAL,GAAW,qBAAX,GAAmCiB,cAAnC,GAAoD,aAApD,GAAoEM,OADrD;AAEpBwE,sBAAQ;AAFY,aAAf,CAAP;AAID;;;yCAEcxE,O,EAASN,c,EAAgB;AACtCY,oBAAQC,GAAR,CAAY,oBAAZ;AACA,mBAAO,KAAKgE,SAAL,CAAe;AACpB9F,mBAAK,KAAKA,GAAL,GAAW,qBAAX,GAAmCiB,cAAnC,GAAoD,aAApD,GAAoEM,OADrD;AAEpBwE,sBAAQ;AAFY,aAAf,CAAP;AAID;;;6CAEkBjF,O,EAASkF,c,EAAgB;AAC1C1G,cAAE2G,MAAF,CAAS,KAAKzF,WAAL,CAAiBM,OAAjB,CAAT,EAAoCxB,EAAEkD,KAAF,CAAQwD,cAAR,CAApC;AACD;;;2CAEgB;AACf,mBAAO,KAAKF,SAAL,CAAe;AACpB9F,mBAAK,KAAKA,GAAL,GAAW,GADI;AAEpB+F,sBAAQ;AAFY,aAAf,EAGJ7D,IAHI,CAGC,oBAAY;AAClB,kBAAIgE,SAASnE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO;AACLA,0BAAQ,SADH;AAELoE,2BAAS,wBAFJ;AAGLC,yBAAO;AAHF,iBAAP;AAKD;AACF,aAXM,CAAP;AAYD;;;0CAGe3F,O,EAAS;AACvBoB,oBAAQC,GAAR,CAAY,qBAAZ;AACA,gBAAIZ,QAAQ,KAAKtB,WAAL,CAAiBK,OAAjB,CAAyBQ,QAAQ4F,UAAR,CAAmBnF,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,gBAAIoF,kBAAkB;AACpBnF,qBAAOV,QAAQU,KADK;AAEpBkF,0BAAY;AACVnG,sBAAMO,QAAQ4F,UAAR,CAAmBnG,IADf;AAEVqG,4BAAY9F,QAAQ4F,UAAR,CAAmBE,UAFrB;AAGVC,wBAAQ/F,QAAQ4F,UAAR,CAAmBG,MAHjB;AAIVC,2BAAWhG,QAAQ4F,UAAR,CAAmBI,SAJpB;AAKVvF,uBAAOA;AALG,eAFQ;AASpBwF,wBAAUjG,QAAQiG;AATE,aAAtB;;AAYA,mBAAO,KAAKZ,SAAL,CAAe;AACpB9F,mBAAK,KAAKA,GAAL,GAAW,cADI;AAEpB+F,sBAAQ,MAFY;AAGpBlF,oBAAMyF;AAHc,aAAf,EAIJpE,IAJI,CAIC,kBAAU;AAChB,qBAAOyE,OAAO9F,IAAd;AACD,aANM,CAAP;AAOD;;;oCAESJ,O,EAAS;AACjBA,oBAAQmG,eAAR,GAA0B,KAAKA,eAA/B;AACAnG,oBAAQN,OAAR,GAAkB,KAAKA,OAAvB;AACA,mBAAO,KAAKR,UAAL,CAAgBkH,iBAAhB,CAAkCpG,OAAlC,CAAP;AACD","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport { HumioHelper } from './helper';\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, $location, $rootScope) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url ? instanceSettings.url.replace(/\\/$/, '') : '';\n    this.name = instanceSettings.name;\n\n    this.$q = $q;\n    this.$location = $location;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.$rootScope = $rootScope;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' +\n        (instanceSettings.jsonData ? (instanceSettings.jsonData.humioToken || 'developer') :\n          'developer')\n    };\n\n    // TODO: not sure if this is right approach\n    this.timeRange = undefined;\n\n    // NOTE: session query storage\n    this.queryParams = {};\n  }\n\n  query(options) {\n\n    // NOTE: if no tragests just return an empty result\n    if (options.targets.length == 0) {\n      return this.$q.resolve({\n        data: []\n      });\n    }\n\n    let panelId = options.panelId;\n    let humioQueryStr = options.targets[0].humioQuery;\n    let humioDataspace = options.targets[0].humioDataspace;\n    var query = options; // TODO: not needed really\n    this.timeRange = options.range;\n\n    // NOTE: if no humio dataspace or no query - consider configuration invalid\n    if (!humioDataspace || !humioQueryStr) {\n      return this.$q.resolve({\n        data: []\n      });\n    }\n\n    var dt = {\n      'queryString': humioQueryStr,\n      'timeZoneOffsetMinutes': -(new Date()).getTimezoneOffset(),\n      'showQueryEventDistribution': false,\n      'start': '24h'\n    }\n\n    // NOTE: modifying query\n    this.queryParams[panelId] = this.queryParams[panelId] ? this.queryParams[panelId] : {\n      queryId: null,\n      failCounter: 0,\n      // humioQueryStr: JSON.stringify(dt),\n      isLive: false,\n      humioQuery: dt\n    };\n\n    return this.$q((resolve, reject) => {\n\n      let handleErr = (err) => {\n        console.log('fallback ->')\n        console.log(err);\n        // TODO: add a counter, if several times get a error - consider query to be invalid, or distinguish between error types\n        if (err.status == 401) {\n          // NOTE: query not found - trying to recreate\n          this._updateQueryParams(panelId, {\n            queryId: null,\n            failCounter: this.queryParams[panelId].failCounter + 1\n          });\n          if (this.queryParams[panelId].failCounter <= 3) {\n            this._composeQuery(panelId, dt, options, humioDataspace).then(handleRes, handleErr);\n          } else {\n            // this.queryParams[panelId].failCounter = 0;\n            this._updateQueryParams(panelId, {failCounter: 0});\n          }\n        } else {\n          if (err.status = 400) {\n            this.$rootScope.appEvent('alert-error', ['Query error', err.data]);\n          } else {\n            this.$rootScope.appEvent('alert-error', [err.status, err.data]);\n          }\n          resolve({\n            data: []\n          });\n        }\n      }\n\n      let handleRes = (r) => {\n        if (r.data.done) {\n          console.log('query done');\n\n          this._updateQueryParams(panelId, {\n            failCounter: 0,\n            queryId: this.queryParams[panelId].isLive ? this.queryParams[panelId].queryId : null\n          });\n\n          resolve(this._composeResult(options, r, () => {\n            let dt = _.clone(r.data);\n            let timeseriesField = '_bucket';\n            let seriesField = dt.metaData.extraData.series;\n            let series = {};\n            let valueField = _.filter(dt.metaData.fields, (f) => {\n              return f.name != timeseriesField && f.name != seriesField;\n            })[0].name;\n\n            // NOTE: aggregating result\n            if (seriesField) {\n              // multiple series\n              for (let i = 0; i < r.data.events.length; i++) {\n                let ev = r.data.events[i];\n                if (!series[ev[seriesField]]) {\n                  series[ev[seriesField]] = [\n                    [ev[valueField], parseInt(ev._bucket)]\n                  ];\n                } else {\n                  series[ev[seriesField]].push([ev[valueField], parseInt(ev._bucket)]);\n                }\n              }\n              r.data = _.keys(series).map((s) => {\n                return {\n                  target: s,\n                  datapoints: series[s]\n                }\n              })\n            } else {\n              // NOTE: single series\n              if (dt.events.length == 1) {\n                // NOTE: consider to be gauge\n                r.data = dt.events.map((ev) => {\n                  return {\n                    target: valueField,\n                    datapoints: [[parseFloat(ev[valueField]), valueField]]\n                  }\n                });\n              } else {\n                // NOTE: consider to be a barchart\n                r.data = dt.events.map((ev) => {\n                  return {\n                    target: ev[valueField],\n                    datapoints: [[parseFloat(ev._count), '_' + ev[valueField]]]\n                  }\n                });\n              }\n            }\n            return r;\n          }));\n        } else {\n          console.log('query running...');\n          console.log('' + (r.data.metaData.workDone / r.data.metaData.totalWork * 100).toFixed(2) + '%');\n          setTimeout(() => {\n            this._composeQuery(panelId, dt, options, humioDataspace).then(handleRes, handleErr);\n          }, 1000);\n        }\n      }\n\n      this._composeQuery(panelId, dt, options, humioDataspace).then(handleRes, handleErr);\n    });\n  }\n\n  _composeResult(queryOptions, r, resFx) {\n    let currentTarget = queryOptions.targets[0];\n    if ((currentTarget.hasOwnProperty('type') &&\n        ((currentTarget.type == 'timeserie') || (currentTarget.type == 'table')) &&\n        (r.data.hasOwnProperty('metaData') && r.data.metaData.hasOwnProperty('extraData') &&\n          r.data.metaData.extraData.timechart == 'true'))) {\n      // NOTE: timechart\n      return resFx();\n    } else if (!currentTarget.hasOwnProperty('type') &&\n      (r.data.hasOwnProperty('metaData') && r.data.metaData.isAggregate == true)) {\n      // NOTE: gauge\n      return resFx();\n    } else {\n      // NOTE: unsuported query for this type of panel\n      this.$rootScope.appEvent('alert-error', ['Unsupported visualisation', 'can\\'t visulize the query result on this panel.']);\n      return {\n        data: []\n      }\n    }\n  }\n\n  _stopUpdatedQuery(panelId, queryDt, humioDataspace) {\n    if (JSON.stringify(this.queryParams[panelId].humioQuery) !== JSON.stringify(queryDt)) {\n      if (this.queryParams[panelId].queryId) {\n        this._stopExecution(this.queryParams[panelId].queryId, humioDataspace);\n      }\n      this._updateQueryParams(panelId, {\n        queryId: null,\n        humioQuery: queryDt\n      });\n    };\n  }\n\n  _composeQuery(panelId, queryDt, grafanaQueryOpts, humioDataspace) {\n\n    let refresh = this.$location ? (this.$location.search().refresh || null) : null;\n    let range = grafanaQueryOpts.range;\n\n    queryDt.isLive = ((refresh != null) && (HumioHelper.checkToDateNow(range.raw.to)));\n\n    // NOTE: setting date range\n    if (queryDt.isLive) {\n      queryDt.start = HumioHelper.parseDateFrom(range.raw.from);\n\n      // TODO: shoudl be moved to _updateQueryParams\n      this._stopUpdatedQuery(panelId, queryDt, humioDataspace);\n\n      this._updateQueryParams(panelId, {humioQuery: queryDt});\n      return this._composeLiveQuery(panelId, queryDt, humioDataspace);\n    } else {\n\n      // TODO: shoudl be moved to _updateQueryParams\n      this._stopUpdatedQuery(panelId, queryDt, humioDataspace);\n\n      if (this.queryParams[panelId].queryId != null) {\n        return this._pollQuery(this.queryParams[panelId].queryId, humioDataspace);\n      } else {\n        queryDt.start = range.from._d.getTime();\n        queryDt.end = range.to._d.getTime();\n\n        // TODO: shoudl be moved to _updateQueryParams\n        this._stopUpdatedQuery(panelId, queryDt, humioDataspace);\n\n        this._updateQueryParams(panelId, {humioQuery: queryDt});\n        return this._initQuery(queryDt, humioDataspace).then((r) => {\n          this._updateQueryParams(panelId, {\n            queryId: r.data.id,\n            isLive:false\n          });\n          return this._pollQuery(r.data.id, humioDataspace);\n        });\n      };\n    };\n  }\n\n  _composeLiveQuery(panelId, queryDt, humioDataspace) {\n    if (this.queryParams[panelId].queryId == null) {\n      return this._initQuery(queryDt, humioDataspace).then((r) => {\n        this._updateQueryParams(panelId, {\n          queryId: r.data.id,\n          isLive: true\n        });\n        return this._pollQuery(r.data.id, humioDataspace);\n      });\n    } else {\n      return this._pollQuery(this.queryParams[panelId].queryId, humioDataspace);\n    }\n  }\n\n  _initQuery(queryDt, humioDataspace) {\n    return this.doRequest({\n      url: this.url + '/api/v1/dataspaces/' + humioDataspace + '/queryjobs',\n      data: queryDt,\n      method: 'POST',\n    });\n  }\n\n  _pollQuery(queryId, humioDataspace) {\n    return this.doRequest({\n      url: this.url + '/api/v1/dataspaces/' + humioDataspace + '/queryjobs/' + queryId,\n      method: 'GET',\n    });\n  }\n\n  _stopExecution(queryId, humioDataspace) {\n    console.log('stopping execution');\n    return this.doRequest({\n      url: this.url + '/api/v1/dataspaces/' + humioDataspace + '/queryjobs/' + queryId,\n      method: 'DELETE',\n    });\n  }\n\n  _updateQueryParams(panelId, newQueryParams) {\n    _.assign(this.queryParams[panelId], _.clone(newQueryParams));\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: 'success',\n          message: 'Data source is working',\n          title: 'Success'\n        };\n      }\n    });\n  }\n\n  // TODO: handle annotationQuery\n  annotationQuery(options) {\n    console.log('annotationQuery -> ');\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n}\n"]}